using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Server.Data;
using Server.Model.DTO;
using Server.Model.Entities;
using System.Text.RegularExpressions;

namespace Server.Services
{
    public class CVProcessingService : ICVProcessingService
    {
        private readonly AppDbContext _context;
        private readonly IRepository<Candidate> _candidateRepository;
        private readonly IRepository<Skill> _skillRepository;
        private readonly IRepository<CandidateSkill> _candidateSkillRepository;

        public CVProcessingService(
            AppDbContext context,
            IRepository<Candidate> candidateRepository,
            IRepository<Skill> skillRepository,
            IRepository<CandidateSkill> candidateSkillRepository)
        {
            _context = context;
            _candidateRepository = candidateRepository;
            _skillRepository = skillRepository;
            _candidateSkillRepository = candidateSkillRepository;
        }

        public async Task<CVProcessingResultDto> ProcessCVAsync(IFormFile cvFile, int uploadedByUserId)
        {
            var result = new CVProcessingResultDto();

            try
            {
                if (cvFile == null || cvFile.Length == 0)
                {
                    result.Success = false;
                    result.Message = "No file provided";
                    return result;
                }

                //file type
                var allowedExtensions = new[] { ".pdf", ".doc", ".docx", ".txt" };
                var fileExtension = Path.GetExtension(cvFile.FileName).ToLowerInvariant();
                
                if (!allowedExtensions.Contains(fileExtension))
                {
                    result.Success = false;
                    result.Message = "Invalid file type. Only PDF, DOC, DOCX, and TXT files are allowed.";
                    return result;
                }

                // Extracting text
                string cvContent = await ExtractTextFromFileAsync(cvFile);
                result.RawContent = cvContent;

                if (string.IsNullOrWhiteSpace(cvContent))
                {
                    result.Success = false;
                    result.Message = "Could not extract text from the CV file";
                    return result;
                }

                // Extracting profile
                var profile = await ExtractProfileFromCVAsync(cvContent, cvFile.FileName);
                
                if (profile == null)
                {
                    result.Success = false;
                    result.Message = "Could not extract profile information from CV";
                    return result;
                }

                var existingCandidate = await _context.Candidates
                    .FirstOrDefaultAsync(c => c.Email == profile.Email);

                Candidate candidate;
                bool isNewCandidate = false;

                if (existingCandidate != null)
                {
                    candidate = existingCandidate;
                    result.Message = "Candidate profile updated from CV";
                }
                else
                {
                    candidate = new Candidate
                    {
                        FirstName = profile.FirstName,
                        LastName = profile.LastName,
                        Email = profile.Email,
                        PhoneNumber = profile.PhoneNumber,
                        CurrentPosition = profile.CurrentPosition,
                        CurrentCompany = profile.CurrentCompany,
                        ExperienceSummary = profile.ExperienceSummary,
                        Education = profile.Education,
                        Source = CandidateSource.CVUpload,
                        SourceDetails = $"CV Upload: {cvFile.FileName}",
                        CreatedByUserId = uploadedByUserId,
                        Status = CandidateStatus.Active,
                        IsAutoGenerated = true
                    };

                    await _candidateRepository.AddAsync(candidate);
                    await _candidateRepository.SaveChangesAsync();
                    isNewCandidate = true;
                    result.Message = "New candidate profile created from CV";
                }

                var candidateCV = new CandidateCV
                {
                    CandidateId = candidate.Id,
                    FileName = cvFile.FileName,
                    FilePath = $"/uploads/cvs/{candidate.Id}_{DateTime.UtcNow:yyyyMMddHHmmss}{fileExtension}",
                    FileType = fileExtension,
                    FileSize = cvFile.Length,
                    Type = CVType.Original,
                    Status = CVStatus.Processed,
                    ParsedContent = cvContent,
                    ParsedSkills = string.Join(", ", profile.Skills),
                    ParsedExperience = profile.ExperienceSummary,
                    ParsedEducation = profile.Education,
                    ProcessingNotes = "Automatically processed",
                    UploadedByUserId = uploadedByUserId,
                    ProcessedAt = DateTime.UtcNow
                };

                await _context.CandidateCVs.AddAsync(candidateCV);
                await _context.SaveChangesAsync();

                await AddSkillsToCandidateAsync(candidate.Id, profile.Skills);

                result.Success = true;
                result.CandidateProfile = new CandidateProfileDto
                {
                    Id = candidate.Id,
                    FirstName = candidate.FirstName,
                    LastName = candidate.LastName,
                    Email = candidate.Email,
                    PhoneNumber = candidate.PhoneNumber,
                    CurrentPosition = candidate.CurrentPosition,
                    CurrentCompany = candidate.CurrentCompany,
                    ExperienceSummary = candidate.ExperienceSummary,
                    Education = candidate.Education,
                    Skills = profile.Skills,
                    Certifications = profile.Certifications,
                    Languages = profile.Languages,
                    Source = (int)candidate.Source,
                    SourceName = candidate.Source.ToString(),
                    CreatedAt = candidate.CreatedAt,
                    IsAutoGenerated = isNewCandidate
                };

                result.ExtractedSkills = profile.Skills;
                result.ExtractedCertifications = profile.Certifications;
                result.ExtractedExperience = profile.ExperienceSummary;
                result.ExtractedEducation = profile.Education;
            }
            catch (Exception ex)
            {
                result.Success = false;
                result.Message = $"Error processing CV: {ex.Message}";
                result.ProcessingErrors.Add(ex.Message);
            }

            return result;
        }

        public async Task<CandidateProfileDto?> ExtractProfileFromCVAsync(string cvContent, string fileName)
        {
            try
            {
                var profile = new CandidateProfileDto();

                profile.Email = ExtractEmailFromTextAsync(cvContent).Result ?? "";

                if (string.IsNullOrEmpty(profile.Email))
                {
                    return null;
                }

                var namePattern = @"(?:Name|Full Name|Candidate|Applicant)[\s:]*([A-Za-z\s]+)";
                var nameMatch = Regex.Match(cvContent, namePattern, RegexOptions.IgnoreCase);
                if (nameMatch.Success)
                {
                    var fullName = nameMatch.Groups[1].Value.Trim();
                    var nameParts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                    if (nameParts.Length >= 2)
                    {
                        profile.FirstName = nameParts[0];
                        profile.LastName = string.Join(" ", nameParts.Skip(1));
                    }
                    else
                    {
                        profile.FirstName = fullName;
                        profile.LastName = "";
                    }
                }
                else
                {
                    var emailName = profile.Email.Split('@')[0];
                    profile.FirstName = emailName;
                    profile.LastName = "";
                }

                profile.PhoneNumber = ExtractPhoneFromTextAsync(cvContent).Result;

                profile.Skills = await ExtractSkillsFromTextAsync(cvContent);

                profile.ExperienceSummary = await ExtractExperienceFromTextAsync(cvContent);

                profile.Education = await ExtractEducationFromTextAsync(cvContent);

                profile.Certifications = await ExtractCertificationsFromTextAsync(cvContent);

                var positionPattern = @"(?:Position|Title|Role)[\s:]*([A-Za-z\s\-/]+)";
                var positionMatch = Regex.Match(cvContent, positionPattern, RegexOptions.IgnoreCase);
                if (positionMatch.Success)
                {
                    profile.CurrentPosition = positionMatch.Groups[1].Value.Trim();
                }

                var companyPattern = @"(?:Company|Employer|Organization)[\s:]*([A-Za-z\s\-/]+)";
                var companyMatch = Regex.Match(cvContent, companyPattern, RegexOptions.IgnoreCase);
                if (companyMatch.Success)
                {
                    profile.CurrentCompany = companyMatch.Groups[1].Value.Trim();
                }

                profile.Source = (int)CandidateSource.CVUpload;
                profile.SourceName = CandidateSource.CVUpload.ToString();
                profile.CreatedAt = DateTime.UtcNow;
                profile.IsAutoGenerated = true;

                return profile;
            }
            catch (Exception)
            {
                return null;
            }
        }

        public async Task<List<string>> ExtractSkillsFromTextAsync(string text)
        {
            var skills = new List<string>();

            try
            {
                var skillPatterns = new[]
                {
                    @"\b(?:JavaScript|Java|Python|C#|C\+\+|PHP|Ruby|Go|Swift|Kotlin)\b",
                    @"\b(?:React|Angular|Vue|Node\.?js|Express|Django|Flask|Spring|ASP\.NET)\b",
                    @"\b(?:SQL|MySQL|PostgreSQL|MongoDB|Redis|Oracle|SQLite)\b",
                    @"\b(?:AWS|Azure|GCP|Docker|Kubernetes|Jenkins|Git)\b",
                    @"\b(?:HTML|CSS|SASS|LESS|Bootstrap|Tailwind)\b",
                    @"\b(?:Machine Learning|AI|Data Science|Analytics|Statistics)\b",
                    @"\b(?:Project Management|Agile|Scrum|Kanban)\b",
                    @"\b(?:Photoshop|Illustrator|Figma|Sketch|Adobe)\b"
                };

                foreach (var pattern in skillPatterns)
                {
                    var matches = Regex.Matches(text, pattern, RegexOptions.IgnoreCase);
                    foreach (Match match in matches)
                    {
                        var skill = match.Value.Trim();
                        if (!skills.Contains(skill, StringComparer.OrdinalIgnoreCase))
                        {
                            skills.Add(skill);
                        }
                    }
                }

                var skillsSectionPattern = @"Skills?[\s:]*([\s\S]*?)(?:\n\n|\n[A-Z]|$)";
                var skillsSectionMatch = Regex.Match(text, skillsSectionPattern, RegexOptions.IgnoreCase);
                if (skillsSectionMatch.Success)
                {
                    var skillsSection = skillsSectionMatch.Groups[1].Value;
                    var skillLines = skillsSection.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                    foreach (var line in skillLines.Take(10))
                    {
                        var skillItems = line.Split(',', ';', '|', StringSplitOptions.RemoveEmptyEntries);
                        foreach (var item in skillItems)
                        {
                            var skill = item.Trim();
                            if (skill.Length > 2 && skill.Length < 50 && !skills.Contains(skill, StringComparer.OrdinalIgnoreCase))
                            {
                                skills.Add(skill);
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
            }

            return skills;
        }

        public async Task<string?> ExtractExperienceFromTextAsync(string text)
        {
            try
            {
                var experiencePatterns = new[]
                {
                    @"Experience[\s:]*([\s\S]*?)(?:\n\n|\n[A-Z]|$)",
                    @"Work Experience[\s:]*([\s\S]*?)(?:\n\n|\n[A-Z]|$)",
                    @"Professional Experience[\s:]*([\s\S]*?)(?:\n\n|\n[A-Z]|$)"
                };

                foreach (var pattern in experiencePatterns)
                {
                    var match = Regex.Match(text, pattern, RegexOptions.IgnoreCase);
                    if (match.Success)
                    {
                        var experience = match.Groups[1].Value.Trim();
                        if (experience.Length > 50)
                        {
                            return experience.Substring(0, Math.Min(1000, experience.Length));
                        }
                    }
                }

                return null;
            }
            catch (Exception)
            {
                return null;
            }
        }

        public async Task<string?> ExtractEducationFromTextAsync(string text)
        {
            try
            {
                var educationPatterns = new[]
                {
                    @"Education[\s:]*([\s\S]*?)(?:\n\n|\n[A-Z]|$)",
                    @"Academic Background[\s:]*([\s\S]*?)(?:\n\n|\n[A-Z]|$)",
                    @"Qualifications[\s:]*([\s\S]*?)(?:\n\n|\n[A-Z]|$)"
                };

                foreach (var pattern in educationPatterns)
                {
                    var match = Regex.Match(text, pattern, RegexOptions.IgnoreCase);
                    if (match.Success)
                    {
                        var education = match.Groups[1].Value.Trim();
                        if (education.Length > 20)
                        {
                            return education.Substring(0, Math.Min(500, education.Length));
                        }
                    }
                }

                return null;
            }
            catch (Exception)
            {
                return null;
            }
        }

        public async Task<List<string>> ExtractCertificationsFromTextAsync(string text)
        {
            var certifications = new List<string>();

            try
            {
                var certPatterns = new[]
                {
                    @"Certifications?[\s:]*([\s\S]*?)(?:\n\n|\n[A-Z]|$)",
                    @"Certificates?[\s:]*([\s\S]*?)(?:\n\n|\n[A-Z]|$)",
                    @"Licenses?[\s:]*([\s\S]*?)(?:\n\n|\n[A-Z]|$)"
                };

                foreach (var pattern in certPatterns)
                {
                    var match = Regex.Match(text, pattern, RegexOptions.IgnoreCase);
                    if (match.Success)
                    {
                        var certSection = match.Groups[1].Value;
                        var certLines = certSection.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                        foreach (var line in certLines.Take(10))
                        {
                            var certItems = line.Split(',', ';', '|', StringSplitOptions.RemoveEmptyEntries);
                            foreach (var item in certItems)
                            {
                                var cert = item.Trim();
                                if (cert.Length > 3 && cert.Length < 100 && !certifications.Contains(cert, StringComparer.OrdinalIgnoreCase))
                                {
                                    certifications.Add(cert);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
            }

            return certifications;
        }

        public async Task<string> ExtractEmailFromTextAsync(string text)
        {
            var emailPattern = @"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b";
            var match = Regex.Match(text, emailPattern);
            return match.Success ? match.Value : "";
        }

        public async Task<string?> ExtractPhoneFromTextAsync(string text)
        {
            var phonePatterns = new[]
            {
                @"\+?[\d\s\-\(\)]{10,}",
                @"\(\d{3}\)\s*\d{3}-\d{4}",
                @"\d{3}-\d{3}-\d{4}"
            };

            foreach (var pattern in phonePatterns)
            {
                var match = Regex.Match(text, pattern);
                if (match.Success)
                {
                    return match.Value.Trim();
                }
            }

            return null;
        }

        private async Task<string> ExtractTextFromFileAsync(IFormFile file)
        {

            var fileExtension = Path.GetExtension(file.FileName).ToLowerInvariant();
            
            using var stream = file.OpenReadStream();
            using var reader = new StreamReader(stream);

            if (fileExtension == ".txt")
            {
                return await reader.ReadToEndAsync();
            }
            else
            {
                return $"Content extracted from {file.FileName} - This is a placeholder for actual text extraction implementation.";
            }
        }

        private async Task AddSkillsToCandidateAsync(int candidateId, List<string> skills)
        {
            foreach (var skillName in skills.Take(20))
            {
                try
                {
                    var existingSkill = await _context.Skills
                        .FirstOrDefaultAsync(s => s.Name.ToLower() == skillName.ToLower());

                    if (existingSkill == null)
                    {
                        existingSkill = new Skill
                        {
                            Name = skillName,
                            Description = $"Auto-generated skill from CV",
                            SkillCategoryId = 1,
                            IsActive = true
                        };
                        await _skillRepository.AddAsync(existingSkill);
                        await _skillRepository.SaveChangesAsync();
                    }

                    var existingCandidateSkill = await _context.CandidateSkills
                        .FirstOrDefaultAsync(cs => cs.CandidateId == candidateId && cs.SkillId == existingSkill.Id);

                    if (existingCandidateSkill == null)
                    {
                        var candidateSkill = new CandidateSkill
                        {
                            CandidateId = candidateId,
                            SkillId = existingSkill.Id,
                            Level = SkillLevel.Intermediate,
                            YearsOfExperience = 1,
                            IsVerified = false,
                            Notes = "Auto-generated from CV"
                        };

                        await _candidateSkillRepository.AddAsync(candidateSkill);
                    }
                }
                catch (Exception)
                {
                    continue;
                }
            }

            await _candidateSkillRepository.SaveChangesAsync();
        }
    }
}
